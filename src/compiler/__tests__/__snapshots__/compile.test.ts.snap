// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`query for Connection 1`] = `
"function extractClass(obj) {
  const s = ObjectSpecifier.classOf(eval(Automation.getDisplayString(obj)));
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(obj) {
  const spec = Automation.getDisplayString(obj);
  if (spec === undefined) {
    return null;
  }
  let inParen = false;
  let inStr = false;
  let ret = \\"\\";
  let nextEscape = null;
  for (let i = 0; i < spec.length; i++) {
    const c = spec[i];
    const inEscape = nextEscape === i;
    if (c === \\"\\\\\\\\\\") {
      nextEscape = i + 1;
      continue;
    }
    if (!inEscape && c === '\\"') {
      inStr = !inStr;
      continue;
    }
    if (!inStr) {
      if (c === \\"(\\") {
        inParen = true;
        ret = \\"\\";
        continue;
      }
      if (c === \\")\\") {
        inParen = false;
        continue;
      }
    }
    ret = \`\${ret}\${c}\`;
  }
  return ret !== \\"\\" ? ret : null;
}
function paginate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const app = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      projects: (() => {
        const allNodes = app.defaultDocument().projects();
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              cursor: extractId(elm),
              node: { __typename: extractClass(elm), name: elm.name() },
            };
          }),
          pageInfo: {
            hasNextPage:
              extractId(nodes[nodes.length - 1]) !==
              extractId(allNodes[allNodes.length - 1]),
          },
        };
      })(),
    },
  },
});
"
`;

exports[`query with fragment 1`] = `
"function extractClass(obj) {
  const s = ObjectSpecifier.classOf(eval(Automation.getDisplayString(obj)));
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(obj) {
  const spec = Automation.getDisplayString(obj);
  if (spec === undefined) {
    return null;
  }
  let inParen = false;
  let inStr = false;
  let ret = \\"\\";
  let nextEscape = null;
  for (let i = 0; i < spec.length; i++) {
    const c = spec[i];
    const inEscape = nextEscape === i;
    if (c === \\"\\\\\\\\\\") {
      nextEscape = i + 1;
      continue;
    }
    if (!inEscape && c === '\\"') {
      inStr = !inStr;
      continue;
    }
    if (!inStr) {
      if (c === \\"(\\") {
        inParen = true;
        ret = \\"\\";
        continue;
      }
      if (c === \\")\\") {
        inParen = false;
        continue;
      }
    }
    ret = \`\${ret}\${c}\`;
  }
  return ret !== \\"\\" ? ret : null;
}
function paginate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const projectId = \\"foobar\\";
const app = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      projects: (() => {
        const allNodes = app.defaultDocument().projects();
        const nodes = allNodes;
        return {
          byId: app.defaultDocument().projects.byId(projectId)
            ? {
                __typename: extractClass(
                  app.defaultDocument().projects.byId(projectId)
                ),
                rootTask: {
                  tasks: (() => {
                    const allNodes = app
                      .defaultDocument()
                      .projects.byId(projectId)
                      .rootTask()
                      .tasks();
                    const nodes = allNodes;
                    return {
                      edges: nodes.map((elm) => {
                        return {
                          node: {
                            __typename: extractClass(elm),
                            completed: elm.completed(),
                            containingProject: elm.containingProject()
                              ? {
                                  id: extractId(elm.containingProject()),
                                  name: elm.containingProject().name(),
                                }
                              : undefined,
                            effectiveDueDate: elm.effectiveDueDate(),
                            effectivelyCompleted: elm.effectivelyCompleted(),
                            flagged: elm.flagged(),
                            id: extractId(elm),
                            name: elm.name(),
                            repetition: elm.repetition()
                              ? {
                                  unit: elm
                                    .repetition()
                                    .unit()
                                    ?.toUpperCase()
                                    .replaceAll(\\" \\", \\"_\\"),
                                }
                              : undefined,
                          },
                        };
                      }),
                    };
                  })(),
                },
              }
            : undefined,
        };
      })(),
    },
  },
});
"
`;

exports[`query with inline fragment 1`] = `
"function extractClass(obj) {
  const s = ObjectSpecifier.classOf(eval(Automation.getDisplayString(obj)));
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(obj) {
  const spec = Automation.getDisplayString(obj);
  if (spec === undefined) {
    return null;
  }
  let inParen = false;
  let inStr = false;
  let ret = \\"\\";
  let nextEscape = null;
  for (let i = 0; i < spec.length; i++) {
    const c = spec[i];
    const inEscape = nextEscape === i;
    if (c === \\"\\\\\\\\\\") {
      nextEscape = i + 1;
      continue;
    }
    if (!inEscape && c === '\\"') {
      inStr = !inStr;
      continue;
    }
    if (!inStr) {
      if (c === \\"(\\") {
        inParen = true;
        ret = \\"\\";
        continue;
      }
      if (c === \\")\\") {
        inParen = false;
        continue;
      }
    }
    ret = \`\${ret}\${c}\`;
  }
  return ret !== \\"\\" ? ret : null;
}
function paginate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const app = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      folders: (() => {
        const allNodes = app.defaultDocument().folders();
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              node: {
                __typename: extractClass(elm),
                name: elm.name(),
                sections: (() => {
                  const allNodes = elm.sections();
                  const nodes = allNodes;
                  return {
                    edges: nodes.map((elm) => {
                      return {
                        node: {
                          __typename: extractClass(elm),
                          ...(() => {
                            return extractClass(elm) === \\"Folder\\"
                              ? {
                                  name: elm.name(),
                                  __typename: \\"Folder\\",
                                }
                              : {};
                          })(),
                          ...(() => {
                            return extractClass(elm) === \\"Project\\"
                              ? {
                                  completed: elm.completed(),
                                  __typename: \\"Project\\",
                                }
                              : {};
                          })(),
                        },
                      };
                    }),
                  };
                })(),
              },
            };
          }),
        };
      })(),
    },
  },
});
"
`;

exports[`query with pageInfo 1`] = `
"function extractClass(obj) {
  const s = ObjectSpecifier.classOf(eval(Automation.getDisplayString(obj)));
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(obj) {
  const spec = Automation.getDisplayString(obj);
  if (spec === undefined) {
    return null;
  }
  let inParen = false;
  let inStr = false;
  let ret = \\"\\";
  let nextEscape = null;
  for (let i = 0; i < spec.length; i++) {
    const c = spec[i];
    const inEscape = nextEscape === i;
    if (c === \\"\\\\\\\\\\") {
      nextEscape = i + 1;
      continue;
    }
    if (!inEscape && c === '\\"') {
      inStr = !inStr;
      continue;
    }
    if (!inStr) {
      if (c === \\"(\\") {
        inParen = true;
        ret = \\"\\";
        continue;
      }
      if (c === \\")\\") {
        inParen = false;
        continue;
      }
    }
    ret = \`\${ret}\${c}\`;
  }
  return ret !== \\"\\" ? ret : null;
}
function paginate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const app = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      projects: (() => {
        const allNodes = app.defaultDocument().projects();
        const nodes = paginate(
          allNodes,
          { first: 10, after: \\"SOME-ID\\" },
          extractId
        );
        return {
          pageInfo: {
            endCursor: extractId(nodes[nodes.length - 1]),
            hasNextPage:
              extractId(nodes[nodes.length - 1]) !==
              extractId(allNodes[allNodes.length - 1]),
            hasPreviousPage: extractId(nodes[0]) !== extractId(allNodes[0]),
            startCursor: extractId(nodes[0]),
          },
        };
      })(),
    },
  },
});
"
`;

exports[`query with project interface 1`] = `
"function extractClass(obj) {
  const s = ObjectSpecifier.classOf(eval(Automation.getDisplayString(obj)));
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(obj) {
  const spec = Automation.getDisplayString(obj);
  if (spec === undefined) {
    return null;
  }
  let inParen = false;
  let inStr = false;
  let ret = \\"\\";
  let nextEscape = null;
  for (let i = 0; i < spec.length; i++) {
    const c = spec[i];
    const inEscape = nextEscape === i;
    if (c === \\"\\\\\\\\\\") {
      nextEscape = i + 1;
      continue;
    }
    if (!inEscape && c === '\\"') {
      inStr = !inStr;
      continue;
    }
    if (!inStr) {
      if (c === \\"(\\") {
        inParen = true;
        ret = \\"\\";
        continue;
      }
      if (c === \\")\\") {
        inParen = false;
        continue;
      }
    }
    ret = \`\${ret}\${c}\`;
  }
  return ret !== \\"\\" ? ret : null;
}
function paginate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const app = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      projects: (() => {
        const allNodes = app.defaultDocument().projects();
        const nodes = allNodes;
        return {
          byId: app.defaultDocument().projects.byId(\\"hZoaSakOnG4\\")
            ? {
                __typename: extractClass(
                  app.defaultDocument().projects.byId(\\"hZoaSakOnG4\\")
                ),
                rootTask: {
                  id: extractId(
                    app
                      .defaultDocument()
                      .projects.byId(\\"hZoaSakOnG4\\")
                      .rootTask()
                  ),
                },
              }
            : undefined,
        };
      })(),
    },
  },
});
"
`;

exports[`typename 1`] = `
"function extractClass(obj) {
  const s = ObjectSpecifier.classOf(eval(Automation.getDisplayString(obj)));
  return (s.match(/[a-zA-Z0-9]+/g) || [])
    .map((w) => \`\${w[0].toUpperCase()}\${w.slice(1)}\`)
    .join(\\"\\");
}
function extractId(obj) {
  const spec = Automation.getDisplayString(obj);
  if (spec === undefined) {
    return null;
  }
  let inParen = false;
  let inStr = false;
  let ret = \\"\\";
  let nextEscape = null;
  for (let i = 0; i < spec.length; i++) {
    const c = spec[i];
    const inEscape = nextEscape === i;
    if (c === \\"\\\\\\\\\\") {
      nextEscape = i + 1;
      continue;
    }
    if (!inEscape && c === '\\"') {
      inStr = !inStr;
      continue;
    }
    if (!inStr) {
      if (c === \\"(\\") {
        inParen = true;
        ret = \\"\\";
        continue;
      }
      if (c === \\")\\") {
        inParen = false;
        continue;
      }
    }
    ret = \`\${ret}\${c}\`;
  }
  return ret !== \\"\\" ? ret : null;
}
function paginate(nodes, { first, after }, getId) {
  const afterIndex =
    after === undefined
      ? undefined
      : nodes.findIndex((n) => getId(n) === after);
  if (afterIndex === -1) {
    return [];
  }
  const start = afterIndex === undefined ? 0 : afterIndex + 1;
  const end = first !== undefined ? start + first : undefined;
  return nodes.slice(start, end);
}
const app = Application(\\"OmniFocus\\");
JSON.stringify({
  result: {
    defaultDocument: {
      sections: (() => {
        const allNodes = app.defaultDocument().sections();
        const nodes = allNodes;
        return {
          edges: nodes.map((elm) => {
            return {
              node: {
                __typename: extractClass(elm),
                ...(() => {
                  return extractClass(elm) === \\"Folder\\"
                    ? {
                        name: elm.name(),
                        __typename: \\"Folder\\",
                      }
                    : {};
                })(),
                ...(() => {
                  return extractClass(elm) === \\"Project\\"
                    ? {
                        effectiveStatus: elm
                          .effectiveStatus()
                          ?.toUpperCase()
                          .replaceAll(\\" \\", \\"_\\"),
                        name: elm.name(),
                        __typename: \\"Project\\",
                      }
                    : {};
                })(),
              },
            };
          }),
        };
      })(),
    },
    perspectiveNames: app.perspectiveNames(),
  },
});
"
`;
